package me.khruslan.tierlistmaker.data.providers.tierlist.tier

import javax.inject.Inject

/**
 * [TierNameProvider] implementation.
 *
 * Letters of the English alphabet are used as tier names.
 *
 * @constructor Creates a new tier name provider instance.
 */
class TierNameProviderImpl @Inject constructor(): TierNameProvider {

    /**
     * Characters for building tier names.
     */
    private companion object Constants {

        /**
         * Special character used as the name of the first tier.
         */
        private const val S_TIER_CHAR = 'S'

        /**
         * Used as the name of the second tier.
         *
         * Tier names between the second and the last can be generated by increasing this
         * character's ASCII value.
         *
         * @see [LAST_TIER_CHAR]
         */
        private const val SECOND_TIER_CHAR = 'A'

        /**
         * Used as the name of the last tier.
         *
         * Tier names between the second and the last can be generated by decreasing this
         * character's ASCII value.
         *
         * @see [SECOND_TIER_CHAR]
         */
        private const val LAST_TIER_CHAR = 'Z'
    }

    /**
     * Generates tier name based on its position.
     *
     * The first tier's name is "S". For next tiers names are "A-Z".
     *
     * @param tierIndex Position of the tier in a tier list.
     * @return Name of the tier.
     * @throws IllegalArgumentException If tier index is negative or bigger than the maximum allowed
     * value (27).
     */
    override fun getNameByIndex(tierIndex: Int): String {
        return when {
            tierIndex == 0 -> S_TIER_CHAR.toString()
            tierIndex > LAST_TIER_CHAR - SECOND_TIER_CHAR + 1 ->
                throw IllegalArgumentException("Unable to get tier name for index: $tierIndex")
            else -> (SECOND_TIER_CHAR + tierIndex - 1).toString()
        }
    }
}
